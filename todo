#!/usr/bin/env ruby
require 'yaml'
require 'stringio'

module TodoList
  class App
    USAGE = <<-END
todo [-\e[4mcategory\e[0m] [\e[4maction\e[0m [\e[4margs...\e[0m]]

  This is a simple todolist manager. You can sort your tasks in categories by
  prepending a dash to the first argument. Whatever is after the dash will be
  the name of the category. Actions requiring a category will select the
  default one (misc) if none is provided. Categories are automatically created
  and removed, so don't worry about it.
  If no action is given, show will be executed as a default.

\e[1mACTIONS\e[0m

  show           show all tasks for the active category
  add            add a task
  remove         remove a tag by it's number (aliases: rm, ok)
  exchange       swap two tasks in the list by their numbers (alias: ex)
  move           change the category of a task (alias: mv)
  change         change the text for a task (alias: ch)
  categories     show available categories (alias: cat)
  top            show the first task for the active category
  help           show a brief help message

\e[1mOPTIONS\e[0m

  help:
    \e[1m--long\e[0m: show this detailed help
    END
    DEFAULT  = "misc"
    TAG_RE   = /\A([a-zA-Z_-]+):/
    COMMANDS = %w(show add remove rm ok up down exchange ex top move mv
                  categories cat help change ch).collect {|x| x.to_sym }

    def initialize(file)
      @file = file
      @data = YAML.load_file(file)
      raise "todolist file malformed" unless @data.is_a?(Hash)
      @category = nil
    end

    def run(args)
      if args.empty?
        show_all
      else
        if args.first[0].chr.eql?('-')
          @category = args.shift[1..-1]
        end
        if args.size.zero? then show; exit end
        @category ||= DEFAULT
        command = args.shift.to_sym
        if COMMANDS.member?(command)
          send(command, *args)
        else
          raise "no such command #{command}"
        end
      end
    end

    def show_all(*args)
      @data.keys.sort.each do |category|
        puts "#{category}:"
        details = capture { show category }
        details.each_line do |todo|
          puts "  #{todo}"
        end
      end
    end

    def show(*args)
      @category = args.first unless args.empty?
      if valid_category?
        @data[@category].each_with_index do |todo, i|
          puts "#{i}) #{todo}"
        end
      else
        puts "category #@category is empty"
      end
    end

    def add(*args)
      check_args(:add, args, 1)
      todo = args.join(' ')
      (@data[@category] ||= []) << todo
      save!; show
    end

    def remove(*args)
      check_args(:remove, args, 1)
      ids = args.collect do |a|
        raise "id out of range" unless a.to_i.between?(0, data.count - 1)
        a.to_i
      end
      ids.each do |id|
        @data[@category].delete_at id
        ids.collect! {|i| i -= 1 }
      end
      save!
      if @data[@category] then show else puts "category #@category clean" end
    end
    alias :rm :remove
    alias :ok :remove

    def move(*args)
      check_args(:move, args, 2)
      id, target = args.shift.to_i, args.shift
      raise "id out of range" unless id.between?(0, data.count - 1)
      (@data[target] ||= []) << @data[@category][id]
      capture { remove id }
      @category = target
      save!; show
    end
    alias :mv :move

    def up(*args)
      check_args(:up, args, 1)
      id  = args.shift.to_i
      raise "id out of range" unless (0..data.count).to_a.member? id
      inc = args.size > 1 ? args.shift.to_i : 1
      if id.zero?
        raise "item already on top"
      else
        while id > 0 && inc > 0
          @data[@category][id-1], @data[@category][id] = data[id], data[id-1]
          id -= 1; inc -= 1
        end
      end
      save!; show
    end

    def down(*args)
      check_args(:up, args, 1)
      id  = args.shift.to_i
      raise "id out of range" unless (0..data.count).to_a.member? id
      inc = args.size > 1 ? args.shift.to_i : 1
      if id.eql?(data.count - 1)
        raise "item already at bottom"
      else
        while id < data.count && inc > 0
          @data[@category][id+1], @data[@category][id] = data[id], data[id+1]
          id += 1; inc -= 1
        end
      end
      save!; show
    end

    def exchange(*args)
      check_args(:exchange, args, 2)
      first, second = args.shift.to_i, args.shift.to_i
      unless (0..data.count).to_a.member?(first) ||
        (0..data.count).to_a.member?(second)
        raise "id out of range"
      end
      @data[@category][first], @data[@category][second] =
        data[second], data[first]
      save!; show
    end
    alias :ex :exchange

    def change(*args)
      check_args(:change, args, 2)
      id, todo = args.shift.to_i, args.join(' ')
      raise "id out of range" unless id.between?(0, data.count - 1)
      @data[@category][id] = todo
      save!; show
    end
    alias :ch :change

    def top(*args)
      puts data.first
    end

    def help(*args)
      if args.member?('--long')
        puts USAGE
      else
        puts USAGE.split($/).first
        puts "use todo help --long for detailed help"
      end
    end

    def categories(*args)
      puts "Categories:"
      puts @data.keys.collect {|c| "- #{c}" }.join("\n")
    end
    alias :cat :categories

    private

    def data
      @data[@category] || []
    end

    def check_args(command, array, count)
      if array.size < count
        raise "#{command} requires at least #{count} args"
      end
    end

    def valid_category?
      @data.keys.member? @category
    end

    def save!
      @data.delete_if {|k,v| v.nil? || v.empty? }
      File.open(@file, 'w+') {|f| f.write YAML.dump(@data) }
    end

    def capture
      $stdout = StringIO.new
      yield
      output = $stdout.string
      $stdout = STDOUT
      output
    end

  end
end

todolist = TodoList::App.new(File.expand_path('~/.todolist'))

begin
  todolist.run(ARGV)
rescue => e
  puts e.message
  exit 1
end
